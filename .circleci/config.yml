version: 2.1

orbs:
  jq: circleci/jq@2.2.0
  aws-cli: circleci/aws-cli@3.1.4
  terraform: circleci/terraform@3.1

executors:
  app-executor:
    docker:
      - image: circleci/node:14.18.1
    working_directory: ~/repo
  
  terraform-executor: 
    docker:
      - image: hashicorp/terraform:latest
aliases:  
  - &show-current-branch
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  
  - &install-dependencies
    run:
      name: Install Dependencies
      command: |
        mkdir -p artifacts

  - &setup-aws-oidc
      name: Get short-term credentials
      command: |
        STS=($(aws sts assume-role-with-web-identity --role-arn ${AWS_ROLE_ARN} --role-session-name "CircleCI-${CIRCLE_BUILD_NUM}" --web-identity-token "${CIRCLE_OIDC_TOKEN}" --duration-seconds 900 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
        echo "export AWS_ACCESS_KEY_ID=${STS[0]}" >> $BASH_ENV
        echo "export AWS_SECRET_ACCESS_KEY=${STS[1]}" >> $BASH_ENV
        echo "export AWS_SESSION_TOKEN=${STS[2]}" >> $BASH_ENV

jobs:
  testconnection:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/install
      - run: *setup-aws-oidc
      - run:
          name: Test AWS connection
          command: aws s3 ls

  setup:
   executor: app-executor
   steps:
      - checkout
      - *show-current-branch
      - *install-dependencies
      - run:
          name: Copy Terraform folder for EKS module
          command: |
           cp -r eks artifacts/eks/
           cp -r argocd artifacts/argocd/
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  setup-aws-cli-path:
   executor: app-executor
   steps:
      - checkout
      - *show-current-branch
      - *install-dependencies
      - run:
          name: Copy Terraform folder for EKS module
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y install awscli
            sudo apt-get install -y python-pip python-dev build-essential
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  terraform-validate:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - *show-current-branch
      - aws-cli/install
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.3.7
      -  run:
          name: Code Quality [EKS]
          command: |
            aws s3 ls
            cd eks/
            terraform init -backend=false
            terraform validate
            terraform fmt -check
      -  run:
          name: Code Quality [ArgoCD]
          command: |
             aws s3 ls
             cd argocd/
             terraform init -backend=false
             terraform validate
             terraform fmt -check

  plan-apply-eks:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch
      -  run:
          name: Terraform Init and Plan [EKS]
          command: |
            cd artifacts/eks/
            terraform init -input=false -backend-config=backend.tfvars
            terraform plan -out=eks.tfplan -var-file=sample.tfvars -input=false
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  apply-eks:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch
      -  run:
          name: Terraform Apply [EKS]
          command: |
            cd artifacts/eks/
            terraform apply -input=false eks.tfplan
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  plan-destroy-eks:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: terraform create destroy plan[EKS]
          command: |
            cd artifacts/eks/
            terraform plan -destroy -out tfeksdestroy -var-file sample.tfvars
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  destroy-eks:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: terraform destroy[EKS]
          command: |
            cd artifacts/eks/
            terraform apply -auto-approve tfeksdestroy

  ## ArgoCD ##
  plan-apply-argocd:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - aws-cli/install
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.3.7
      - attach_workspace:
          at: ./
      - *show-current-branch
      -  run:
          name: Terraform Init and Plan [ArgoCD]
          command: |
            cd artifacts/argocd/
            terraform init -input=false -backend-config=backend.tfvars
            terraform plan -out=argocd.tfplan -input=false
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  apply-argocd:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - aws-cli/install
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.3.7
      - aws-cli/install
      - attach_workspace:
          at: ./
      - *show-current-branch
      -  run:
          name: Terraform Apply [ArgoCD]
          command: |
            cd artifacts/argocd/
            terraform apply -input=false argocd.tfplan
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  plan-destroy-argocd:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - aws-cli/install
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.3.7
      - aws-cli/install
      - attach_workspace:
          at: ./
      - run:
          name: terraform create destroy plan[ArgoCD]
          command: |
            cd artifacts/argocd/
            terraform plan -destroy -out tfargocddestroy
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  destroy-argocd:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - aws-cli/install
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.3.7
      - aws-cli/install
      - attach_workspace:
          at: ./
      - run:
          name: terraform destroy[ArgoCD]
          command: |
            cd artifacts/argocd/
            terraform apply -auto-approve tfargocddestroy


workflows:
  argocd-eks-setup:
    jobs:
      - testconnection:
          context: calvine-cloudonmymind

      - setup:
          requires:
            - testconnection
      - setup-aws-cli-path:
          requires:
            - testconnection

      - terraform-validate:
          context: calvine-cloudonmymind
          requires:
            - setup
            - setup-aws-cli-path
          # filters:
          #   branches:
          #     only:
          #       - main

      - plan-apply-eks:
          context: calvine-cloudonmymind
          requires:
            - testconnection
            - terraform-validate
      #     # filters:
      #     #   branches:
      #     #     only:
      #     #       - main

      # - hold-apply-eks:
      #     type: approval
      #     requires:
      #       - plan-apply-eks

      # - apply-eks:
      #     context: calvine-cloudonmymind
      #     requires:
      #       - hold-apply-eks
      #       - testconnection
      #       - terraform-validate

      - plan-apply-argocd:
          context: calvine-cloudonmymind
          requires:
            - testconnection
            - terraform-validate
            # - apply-eks
          # filters:
          #   branches:
          #     only:
          #       - main

      - hold-apply-argocd:
          type: approval
          requires:
            - plan-apply-argocd

      - apply-argocd:
          context: calvine-cloudonmymind
          requires:
            - hold-apply-argocd
            - testconnection
            - terraform-validate

       ##❗️ Danger Zone EKS##
      - plan-destroy-eks:
          requires:
            - testconnection
            - plan-apply-eks
      - hold-destroy-eks:
          type: approval
          requires:
            - plan-destroy-eks
      - destroy-eks:
          requires:
            - hold-destroy-eks

       ##❗️ Danger Zone ArgoCD##
      - plan-destroy-argocd:
          requires:
            - testconnection
            - apply-argocd
      - hold-destroy-argocd:
          type: approval
          requires:
            - plan-destroy-argocd
      - destroy-argocd:
          requires:
            - hold-destroy-argocd
